/****************************************************************************
**
** Copyright (C) 2016 - 2017
**
** This file is generated by the Magus toolkit
**
** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
** "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."
**
****************************************************************************/

#ifndef MAGUS_CONTAINER_WIDGET_H
#define MAGUS_CONTAINER_WIDGET_H

#include <QWidget>
#include <QFrame>
#include <QLabel>
#include <QSize>
#include <QPixmap>
#include <QMap>
#include <QHBoxLayout>
#include <QVBoxLayout>
#include "asset_assetconstants.h"
#include "asset_clickableframe.h"
#include "asset_propertywidget.h"
#include "asset_clickablelabel.h"

QT_BEGIN_NAMESPACE

QT_END_NAMESPACE

namespace Magus
{
    /****************************************************************************
    Widget class that includes properties (QtProperty)
    ***************************************************************************/
    class QtContainerWidget : public QWidget
    {
        Q_OBJECT

        public:
            QtContainerWidget(const QString& title, bool line = true, QWidget* parent = 0);
            virtual ~QtContainerWidget(void){}

            // Hide or display the header of a container. If the header is hidden, only the properties are
            // visible, so it is not possible to collapse or expand the container.
            void setHeaderHidden(bool hidden);

            // Function to set the title in bold or normal style
            void setTitleBold(bool bold = true);

            // Set the icon, associated with the title
            void setTitleIcon(const QString& fileNameIcon);

            // Filename of the icon used for indicating that a container is collapsed.
            void setFileNameIconCollapsed(const QString& fileNameIcon);

            // Filename of the icon used for indicating that a container is expanded.
            void setFileNameIconExpanded(const QString& fileNameIcon);

            // Set the icon for action 1. Note, that the action involved with this icon can be anything; it
            // doesn't need to refer to a specific action. Leftclicking this icon emits the
            // action1Clicked signal.
            void setAction1Icon(const QString& fileNameIcon);

            // Icon similar to the action icon 2. The action involved with this icon can be anything.
            // Leftclicking this icon emits the action2Clicked signal.
            void setAction2Icon(const QString& fileNameIcon);

            // Expand this container
            void expand(void);

            // Collapse this container
            void collapse(void);

            // Create a container (QtContainerWidget) within this container.
            // Note: All created QtContainerWidget and QtProperty objects in this QtContainerWidget
            // MUST have a unique id within this container.
            QtContainerWidget* createContainer (int containerId,
                                                QString title,
                                                bool line = false);

            // Create a property in this container.
            // The type (QtProperty::PropertyType) determines which type of property is created.
            // immutable determines whether a property is read-only or not.
            // If a value of the property is changed, a propertyValueChanged signal is emitted.
            // Note: All created QtContainerWidget and QtProperty objects in this QtContainerWidget
            // MUST have a unique id within this container.
            QtProperty* createProperty (int propertyId,
                                        QString title,
                                        QtProperty::PropertyType type,
                                        bool immutable = false);
            QtProperty* getPropertyWidget (int propertyId);

            int mContainerId; // Make it public for fast access

        signals:
            // Emitted when the action 1 icon is clicked
            void action1Clicked(QtContainerWidget* containerWidget);

            // Emitted when the action 2 icon is clicked
            void action2Clicked(QtContainerWidget* containerWidget);

            // Emitted when the value of a property (QtProperty) changes
            void valueChanged(int propertyId);

            // Emitted when the value of a property (QtProperty) changes
            void valueChanged(QtProperty* property);

        protected:
            void updateCollapseExpandIcon(void);
            void rebuildWidgetContent(void);

        private slots:
            void headerClicked(void);
            void action1IconClicked(void);
            void action1IconClicked(QtContainerWidget* containerWidget);
            void action2IconClicked(void);
            void action2IconClicked(QtContainerWidget* containerWidget);
            void propertyValueChanged(QtProperty* property);

        private:
            QMap<int, QWidget*> mQtWidgetMap;
            QVBoxLayout* mBodyMainLayout;
            QHBoxLayout* mHeaderLayout;
            QHBoxLayout* mHeaderLeftLayout;
            QHBoxLayout* mHeaderRightLayout;
            QLabel* mHeaderTitleIconLabel;
            QString mTitleFileNameIcon;
            bool mExpanded;
            QtClickableFrame* mHeader;
            QLabel* mHeaderTitleLabel;
            QFrame* mBody;
            QLabel* mHeaderIconCollapsedExpandLabel;
            QtClickableLabel* mHeaderAction1IconLabel;
            QtClickableLabel* mHeaderAction2IconLabel;
            QString mFileNameIconCollapsed;
            QString mFileNameIconExpand;
            QString mFileNameAction1Icon;
            QString mFileNameAction2Icon;
            QPixmap mHeaderCollapsedPixmap;
            QPixmap mHeaderExpandPixmap;
            QPixmap mHeaderAction1IconPixmap;
            QPixmap mHeaderAction2IconPixmap;
            QSize mHeaderIconSize;
    };
}

#endif
