/****************************************************************************
**
** Copyright (C) 2015
**
** This file is generated by the Magus toolkit
**
** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
** "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."
**
****************************************************************************/

#ifndef MAGUS_TREEWIDGET_H
#define MAGUS_TREEWIDGET_H

#include <QTreeWidget>
#include <QMimeData>
#include <QStringList>
#include <QMap>

QT_BEGIN_NAMESPACE

QT_END_NAMESPACE

namespace Magus
{
    /****************************************************************************
    The QtTreeWidget is a QTreeWidget with convenience functions regarding
    drag and drop.
    ***************************************************************************/
    class QtTreeWidget : public QTreeWidget
    {
        Q_OBJECT

        public:
            QtTreeWidget(QWidget* parent = 0);
            virtual ~QtTreeWidget(void);
            void addIntValueToMimeData (int key, int value);

        protected:
            virtual QMimeData* mimeData(const QList<QTreeWidgetItem*> items) const;
            virtual QStringList	mimeTypes() const;
            virtual Qt::DropActions	supportedDropActions() const;
            virtual bool dropMimeData (QTreeWidgetItem* parent, int index, const QMimeData * data, Qt::DropAction action)
            {
                return true;
            }

        private:
            QStringList mTypes;
            QMap<int, int> mKeyValueMap;
    };
}

#endif
